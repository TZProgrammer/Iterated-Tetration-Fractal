let prevMouseX
let prevMouseY
let prevScal = 5
let dmin

function setup() {
  createCanvas(750, 750);
  background(10);
  scal = createSlider(0.1, 5, 5, 0.01);
  prevMouseX = mouseX
  prevMouseY = mouseY
  console.log(width,height)
  for (var x = width / 2; x <= width; x += width / (2 * scal.value())) {
    for (var y = height / 2; y <= height; y += height / (2 * scal.value())) {
      stroke(240);
      strokeWeight(1);
      line(x, 0, x, height);
      line(width - x, 0, width - x, height);
      line(0, y, width, y);
      line(0, height - y, width, height - y);
    }
  }
}

function drawPoints(mouse1, mouse2) {
  let a = scal.value() * (mouse1 - width / 2) / (width / 2);
  let b = -scal.value() * (mouse2 - height / 2) / (height / 2);
  let a1 = a;
  let b1 = b;
  let a2 = a;
  let b2 = b;
  let v1 = createVector(1, 0);
  let v2 = createVector(a, b);
  let r
  let t
  let col
  let p = 0
  let currdmin = 10
  for (let j = 0; j < 50; j++) {
    v2 = createVector(a, b);
    if (b < 0) {
      t = -v2.angleBetween(v1)
    } else {
      t = v2.angleBetween(v1)
    }
    r = (Math.E) ** (a1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)) - b1 * t);
    a2 = r * cos(a1 * t + b1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)));
    b2 = r * sin(a1 * t + b1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)));
    a1 = a2;
    b1 = b2;
    dmin = sqrt((a1 - a) ** 2 + (b1 - b) ** 2);
    if (dmin < currdmin) {
      currdmin = dmin;
      lim = j + 1;
    }
  }
  a1 = a;
  b1 = b;
  a2 = a;
  b2 = b;
  noStroke();
  fill(255);
  textSize(20);
  text("Repetition Pattern: " + str(lim), 5, 20);
  textSize(15);
  text("Coordenates: " + str(round(a*10000)/10000) + ", " + str(round(b*10000)/10000), 5, 35);
  for (let i = 0; i < 1500; i++) {
    p++
    col = p % lim
    if (col == 0) {
      fill("#800000");
    } else if (col == 1) {
      fill("#3cb44b");
    } else if (col == 2) {
      fill("#4363d8");
    } else if (col == 3) {
      fill("#ffe119");
    } else if (col == 4) {
      fill("#911eb4");
    } else if (col == 5) {
      fill("#42d4f4");
    } else if (col == 6) {
      fill("#9A6324");
    } else if (col == 7) {
      fill("#000075");
    } else if (col == 8) {
      fill("#bfef45");
    } else if (col == 9){
      fill("#808000");
    } else if (col == 10) {
      fill("#e6beff");
    } else if (col == 11) {
      fill("#f58231");
    } else if (col == 12) {
      fill("#a9a9a9");
    } else if (col == 13) {
      fill("#e6194B");
    } else if (col == 14) {
      fill("#fffac8");
    } else {
      fill(210)
    }
    circle(a1*width / (2*scal.value()) + width/2, -b1*height/(2*scal.value()) + height/2, 5);
    v2 = createVector(a, b);
    if (b < 0) {
      t = -v2.angleBetween(v1)
    } else {
      t = v2.angleBetween(v1)
    }
    r = (Math.E) ** (a1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)) - b1 * t);
    a2 = r * cos(a1 * t + b1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)));
    b2 = r * sin(a1 * t + b1 * Math.log((a ** 2 + b ** 2) ** (1 / 2)));
    a1 = a2;
    b1 = b2;
  }
}


function draw() {
  background(10);
  let lim = 1
  let col = 1
  for (var x = width / 2; x <= width; x += width / (2 * scal.value())) {
    for (var y = height / 2; y <= height; y += height / (2 * scal.value())) {
      stroke(240);
      strokeWeight(1);
      line(x, 0, x, height);
      line(width - x, 0, width - x, height);
      line(0, y, width, y);
      line(0, height - y, width, height - y);
    }
  }

  if (mouseIsPressed && mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
    prevMouseX = mouseX
    prevMouseY = mouseY
    prevScal = scal.value()
    drawPoints(mouseX, mouseY, col)
  } else {
    let fx = prevScal * (prevMouseX - width / 2) / (width / 2);
    let fy = prevScal * (prevMouseY - height / 2) / (height / 2);
    let nfx = fx * width / (2 * scal.value()) + width / 2
    let nfy = fy * height / (2 * scal.value()) + height / 2
    drawPoints(nfx, nfy, col)
  }
  fill(255)
  text("Mouse Coordenates: " + str(round(scal.value() * (mouseX - width / 2) / (width / 2)*10000)/10000) + ", " + str(round(-scal.value() * (mouseY - height / 2) / (height / 2)*10000)/10000), 5, 50);
}
